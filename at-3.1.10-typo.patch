--- at-3.1.10/atrun.8.in.typo	2005-08-29 10:08:41.000000000 +0200
+++ at-3.1.10/atrun.8.in	2006-09-12 10:00:57.000000000 +0200
@@ -11,7 +11,7 @@
 .B atrun
 runs jobs queued by
 .BR at(1) .
-It is a shell script containing invoking
+It is a shell script invoking
 .B @sbindir@/atd
 with the
 .I -s
--- at-3.1.10/atd.c.typo	2006-09-12 10:00:57.000000000 +0200
+++ at-3.1.10/atd.c	2006-09-12 10:07:19.000000000 +0200
@@ -316,7 +316,7 @@
 	     "aborting", jobno, filename);
 
     if (buf.st_nlink > 2) {
-	perr("Someboy is trying to run a linked script for job %8lu (%.500s)",
+	perr("Somebody is trying to run a linked script for job %8lu (%.500s)",
 	     jobno, filename);
     }
     if ((fflags = fcntl(fd_in, F_GETFD)) < 0)
@@ -607,6 +607,7 @@
 		 * Let's remove the lockfile and reschedule.
 		 */
 		strncpy(lock_name, dirent->d_name, sizeof(lock_name));
+		lock_name[sizeof(lock_name)-1] = '\0';
 		lock_name[0] = '=';
 		unlink(lock_name);
 		next_job = now;
@@ -623,7 +624,7 @@
 	nothing_to_do = 0;
 
 	/* There's a job for later.  Note its execution time if it's
-	 * the earlierst so far.
+	 * the earliest so far.
 	 */
 	if (run_time > now) {
 	    if (next_job > run_time) {
@@ -641,6 +642,7 @@
 	    run_batch++;
 	    if (strcmp(batch_name, dirent->d_name) > 0) {
 		strncpy(batch_name, dirent->d_name, sizeof(batch_name));
+		batch_name[sizeof(batch_name)-1] = '\0';
 		batch_uid = buf.st_uid;
 		batch_gid = buf.st_gid;
 		batch_queue = queue;
@@ -683,7 +685,7 @@
 int
 main(int argc, char *argv[])
 {
-/* Browse through  ATJOB_DIR, checking all the jobfiles wether they should
+/* Browse through  ATJOB_DIR, checking all the jobfiles whether they should
  * be executed and or deleted. The queue is coded into the first byte of
  * the job filename, the date (in minutes since Eon) as a hex number in the
  * following eight bytes, followed by a dot and a serial number.  A file
